<type>(<scope>): <subject>

<body>

<footer>

# ------------------------------------------------------------------
# Allowed Values for <type>
# ------------------------------------------------------------------

# feat (new feature)
# fix (bug fix)
# docs (changes to documentation)
# style (formatting, missing semi colons, etc; no code change)
# refactor (refactoring production code)
# test (adding missing tests, refactoring tests; no production code change)
# chore (updating grunt tasks etc; no production code change)

# Scope varies per project. For example, a project with an admin interface would
# use a scope of (admin) to denote commits that change admin code. Another project
# might have a scope of (backup) to commits referencing backup code changes.

# An imperative tone is also helpful in conveying what a commit does, rather than what 
# it did. For example, use change, not changed or changes.

# The body of the commit message should use a style similar to the one proposed in 
# this article by tpope. The body, just like the subject, should use an imperative tone.

# feat($browser): onUrlChange event (popstate/hashchange/polling)
#
# Added new event to $browser:
# - forward popstate event if available
# - forward hashchange event if popstate not available
# - do polling when neither popstate nor hashchange available
#
# Breaks $browser.onHashChange, which was removed (use onUrlChange instead)


# ------------------------------------------------------------------
# Summarize changes in around 50 characters or less
# ------------------------------------------------------------------
# 
# More detailed explanatory text, if necessary. Wrap it to about 72
# characters or so. In some contexts, the first line is treated as the
# subject of the commit and the rest of the text as the body. The
# blank line separating the summary from the body is critical (unless
# you omit the body entirely); various tools like `log`, `shortlog`
# and `rebase` can get confused if you run the two together.
# 
# Explain the problem that this commit is solving. Focus on why you
# are making this change as opposed to how (the code explains that).
# Are there side effects or other unintuitive consequenses of this
# change? Here's the place to explain them.
# 
# Further paragraphs come after blank lines.
# 
#  - Bullet points are okay, too
# 
#  - Typically a hyphen or asterisk is used for the bullet, preceded
#    by a single space, with blank lines in between, but conventions
#    vary here
# 
# If you use an issue tracker, put references to them at the bottom,
# like this:
# 
# Resolves: #123
# See also: #456, #789
